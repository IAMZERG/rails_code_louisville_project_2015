require 'spec_helper'

  # This spec was generated by rspec-rails when you ran the scaffold generator.
  # It demonstrates how one might use RSpec to specify the controller code that
  # was generated by Rails when you ran the scaffold generator.
  #
  # It assumes that the implementation code is generated by the rails scaffold
  # generator.  If you are using any extension libraries to generate different
  # controller code, this generated spec may or may not pass.
  #
  # It only uses APIs available in rails and/or rspec-rails.  There are a number
  # of tools you can use to make these specs even more expressive, but we're
  # sticking to rails and rspec-rails APIs to keep things simple and stable.
  #
  # Compared to earlier versions of this generator, there is very limited use of
  # stubs and message expectations in this spec.  Stubs are only used when there
  # is no simpler way to get a handle on the object needed for the example.
  # Message expectations are only used when there is no simpler way to specify
  # that an instance is receiving a specific message.

  describe DecklistsController do

  # This should return the minimal set of attributes required to create a valid
  # Decklist. As you add validations to Decklist, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { "name" => "MyString", "description" => "My Description" } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # DecklistsController. Be sure to keep this updated too.
  let(:valid_session) { {} }
  let!(:user) {create(:user) }

  before do
    sign_in(user)
  end


  describe "GET index" do
    it "assigns all decklists as @decklists" do
      decklist = Decklist.create! valid_attributes
      controller.stub(:current_user).and_return(build_stubbed(:user))
      get :index, {}, valid_session
      assigns(:decklists).should eq([decklist])
    end
  end

  describe "GET show" do
    it "assigns the requested decklist as @decklist" do
      decklist = Decklist.create! valid_attributes
      get :show, {:id => decklist.to_param}, valid_session
      assigns(:decklist).should eq(decklist)
    end
  end

  describe "GET new" do
    it "assigns a new decklist as @decklist" do
      get :new, {}, valid_session
      assigns(:decklist).should be_a_new(Decklist)
    end
  end

  describe "GET edit" do
    it "assigns the requested decklist as @decklist" do
      decklist = Decklist.create! valid_attributes
      get :edit, {:id => decklist.to_param}, valid_session
      assigns(:decklist).should eq(decklist)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Decklist" do
        expect {
          post :create, {:decklist => valid_attributes}, valid_session
        }.to change(Decklist, :count).by(1)
      end

      it "assigns a newly created decklist as @decklist" do
        post :create, {:decklist => valid_attributes}, valid_session
        assigns(:decklist).should be_a(Decklist)
        assigns(:decklist).should be_persisted
      end

      it "redirects to the created decklist" do
        post :create, {:decklist => valid_attributes}, valid_session
        response.should redirect_to(Decklist.last)
      end

      it "creates a todo list for the current user" do
        post :create, {:decklist => valid_attributes}, valid_session
        decklist = Decklist.last
        expect(decklist.user).to eq(user)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved decklist as @decklist" do
        # Trigger the behavior that occurs when invalid params are submitted
        Decklist.any_instance.stub(:save).and_return(false)
        post :create, {:decklist => { "name" => "invalid value" }}, valid_session
        assigns(:decklist).should be_a_new(Decklist)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Decklist.any_instance.stub(:save).and_return(false)
        post :create, {:decklist => { "name" => "invalid value" }}, valid_session
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested decklist" do
        decklist = Decklist.create! valid_attributes
        # Assuming there are no other decklists in the database, this
        # specifies that the Decklist created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Decklist.any_instance.should_receive(:update).with({ "name" => "MyString" })
        put :update, {:id => decklist.to_param, :decklist => { "name" => "MyString" }}, valid_session
      end

      it "assigns the requested decklist as @decklist" do
        decklist = Decklist.create! valid_attributes
        put :update, {:id => decklist.to_param, :decklist => valid_attributes}, valid_session
        assigns(:decklist).should eq(decklist)
      end

      it "redirects to the decklist" do
        decklist = Decklist.create! valid_attributes
        put :update, {:id => decklist.to_param, :decklist => valid_attributes}, valid_session
        response.should redirect_to(decklist)
      end
    end

    describe "with invalid params" do
      it "assigns the decklist as @decklist" do
        decklist = Decklist.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Decklist.any_instance.stub(:save).and_return(false)
        put :update, {:id => decklist.to_param, :decklist => { "name" => "invalid value" }}, valid_session
        assigns(:decklist).should eq(decklist)
      end

      it "re-renders the 'edit' template" do
        decklist = Decklist.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Decklist.any_instance.stub(:save).and_return(false)
        put :update, {:id => decklist.to_param, :decklist => { "name" => "invalid value" }}, valid_session
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested decklist" do
      decklist = Decklist.create! valid_attributes
      expect {
        delete :destroy, {:id => decklist.to_param}, valid_session
      }.to change(Decklist, :count).by(-1)
    end

    it "redirects to the decklists list" do
      decklist = Decklist.create! valid_attributes
      delete :destroy, {:id => decklist.to_param}, valid_session
      response.should redirect_to(decklists_url)
    end
  end

end
